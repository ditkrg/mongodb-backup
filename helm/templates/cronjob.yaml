{{- $baseValues := . }}

{{- range $name, $values := .Values.jobs }}
---

{{- $concurrencyPolicy:= ($values.concurrencyPolicy | default $baseValues.Values.concurrencyPolicy ) | required "concurrencyPolicy is required " }}
{{- $failedJobsHistoryLimit:= ($values.failedJobsHistoryLimit | default $baseValues.Values.failedJobsHistoryLimit) | required "failedJobsHistoryLimit is required " }}
{{- $successfulJobsHistoryLimit:= ($values.successfulJobsHistoryLimit | default $baseValues.Values.successfulJobsHistoryLimit) | required "successfulJobsHistoryLimit is required " }}
{{- $activeDeadlineSeconds:= ($values.activeDeadlineSeconds | default $baseValues.Values.activeDeadlineSeconds) | required "activeDeadlineSeconds is required " }}
{{- $ttlSecondsAfterFinished:= ($values.ttlSecondsAfterFinished | default $baseValues.Values.ttlSecondsAfterFinished) | required "ttlSecondsAfterFinished is required " }}
{{- $backoffLimit:= ($values.backoffLimit | default $baseValues.Values.backoffLimit) | required "backoffLimit is required " }}
{{- $restartPolicy:= ($values.restartPolicy | default $baseValues.Values.restartPolicy) | required "restartPolicy is required " }}
{{- $securityContext:= ($values.securityContext | default $baseValues.Values.securityContext) | required "securityContext is required " }}
{{- $ephemeral:= ($values.ephemeral | default $baseValues.Values.ephemeral ) | required "ephemeral is required " }}

{{- $resources:= ($values.resources | default $baseValues.Values.resources ) | required "resources is required" }}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $name }}
spec:
  concurrencyPolicy: {{ $concurrencyPolicy }}
  failedJobsHistoryLimit: {{ $failedJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ $successfulJobsHistoryLimit }}
  schedule: {{ $values.schedule | required "schedule is required" }}
  jobTemplate:
    spec:
      activeDeadlineSeconds: {{ $activeDeadlineSeconds}}
      ttlSecondsAfterFinished: {{ $ttlSecondsAfterFinished }}
      backoffLimit: {{ $backoffLimit}}
      template:
        spec:
          restartPolicy: {{ $restartPolicy }}
          securityContext: {{ toYaml $securityContext | nindent 12 }}

          volumes:
            - name: backup
              ephemeral: {{ toYaml $ephemeral | nindent 16 }}
          containers:
            - name: {{ $name }}
              image: {{ include "common.images.image" $baseValues }}
              imagePullPolicy: {{ include "common.images.pullPolicy" $baseValues }}

              args: {{ $values.args | toJson }}

              {{- if $values.env }}
              env: {{ toYaml $values.env | nindent 16 }}
              {{- end }}

              envFrom:
                {{- if $values.envFrom }}
                {{- toYaml $values.envFrom | nindent 16 }}
                {{- end }}

                {{- if $values.configs }}
                - configMapRef:
                    name: {{ $name }}
                {{- end }}

                {{- if $values.sealedSecrets }}
                {{- if $values.sealedSecrets.enabled }}
                - secretRef:
                    name: {{ $values.sealedSecrets.name | default ( printf "%s-sealed" $name) }}
                {{- end }}
                {{- end }}

                {{- if $values.infisical }}
                {{- if $values.infisical.enabled }}
                - secretRef:
                    name: {{ $values.infisical.managedSecret.name | default  ( printf  "%s-managed" $name ) }}
                {{- end }}
                {{- end }}

              resources: {{- toYaml $resources  | nindent 16 }}

              volumeMounts:
                - name: backup
                  mountPath: /backup
{{- end }}
