## @section values

## @param schedule Schedule for the cronjob
schedule:

## @param concurrencyPolicy Concurrency policy for the cronjob
concurrencyPolicy: Forbid

## @param failedJobsHistoryLimit Number of failed jobs to keep
failedJobsHistoryLimit: 3

## @param successfulJobsHistoryLimit Number of successful jobs to keep
successfulJobsHistoryLimit: 3

## @param activeDeadlineSeconds Active deadline seconds for the cronjob
activeDeadlineSeconds: 600

## @param ttlSecondsAfterFinished TTL seconds after finished for the cronjob
ttlSecondsAfterFinished: 300

## @param backoffLimit Backoff limit for the cronjob
backoffLimit: 3

## @param restartPolicy Restart policy for the cronjob
restartPolicy: OnFailure

## @section global
global:
  image:
    ## @param global.image.fullPath
    fullPath:
    ## @param global.image.registry
    registry:
    ## @param global.image.repository
    repository:
    ## @param global.image.tag
    tag:
    ## @param global.image.pullPolicy
    pullPolicy:

## @section image Image for the cronjob
image:
  ## @param image.fullPath
  fullPath:
  ## @param image.registry
  registry: reg.dev.krd
  ## @param image.repository
  repository: common/mongodb-backup-cli
  ## @param image.tag
  tag:
  ## @param image.pullPolicy
  pullPolicy: IfNotPresent

## @section securityContext Security context for the cronjob (can replace the whole object)
securityContext:
  ## @param securityContext.runAsUser
  runAsUser: 1001
  ## @param securityContext.runAsGroup
  runAsGroup: 1001
  ## @param securityContext.runAsNonRoot
  runAsNonRoot: true
  ## @param securityContext.allowPrivilegeEscalation
  allowPrivilegeEscalation: false
  ## @param securityContext.privileged
  privileged: false
  ## @param securityContext.capabilities.drop
  capabilities:
    drop:
      - ALL

## @section ephemeral Ephemeral volume for the cronjob (can replace the whole object)
ephemeral:
  volumeClaimTemplate:
    spec:
      resources:
        limits:
          ## @param ephemeral.volumeClaimTemplate.spec.resources.limits.storage
          storage: 2Gi
        request:
          ## @param ephemeral.volumeClaimTemplate.spec.resources.request.storage
          storage: 2Gi

## @section resources Resources for the cronjob (can replace the whole object)
resources:
  requests:
    ## @param resources.requests.cpu
    cpu: 100m
  limits:
    ## @param resources.limits.memory
    memory: 200Mi

## @section jobs list of cronjobs to create
jobs:
  job-name:
    ## @param jobs.job-name.schedule Schedule for the cronjob (Required)
    schedule: ""

    ## @param jobs.job-name.args Arguments for the cronjob (Required)
    args: []

    ## @param jobs.job-name.configs Configs for the cronjob, key value pairs
    configs:

    ## @param jobs.job-name.concurrencyPolicy Concurrency policy for the cronjob (Optional, defaults to global value)
    concurrencyPolicy:
    ## @param jobs.job-name.failedJobsHistoryLimit Number of failed jobs to keep (Optional, defaults to global value)
    failedJobsHistoryLimit:

    ## @param jobs.job-name.successfulJobsHistoryLimit Number of successful jobs to keep (Optional, defaults to global value)
    successfulJobsHistoryLimit:

    ## @param jobs.job-name.activeDeadlineSeconds Active deadline seconds for the cronjob (Optional, defaults to global value)
    activeDeadlineSeconds:

    ## @param jobs.job-name.ttlSecondsAfterFinished TTL seconds after finished for the cronjob (Optional, defaults to global value)
    ttlSecondsAfterFinished:

    ## @param jobs.job-name.backoffLimit Backoff limit for the cronjob (Optional, defaults to global value)
    backoffLimit:

    ## @param jobs.job-name.restartPolicy Restart policy for the cronjob (Optional, defaults to global value)
    restartPolicy: ""

    ## @param jobs.job-name.securityContext Security context for the cronjob (Optional, defaults to global value)
    securityContext: {}

    ## @param jobs.job-name.ephemeral Ephemeral volume for the cronjob (Optional, defaults to global value)
    ephemeral: {}

    ## @param jobs.job-name.resources Resources for the cronjob (Optional, defaults to global value)
    resources: {}

    ## @param jobs.job-name.env Environment variables for the cronjob
    env: []

    ## @param jobs.job-name.envFrom Environment variables for the cronjob
    envFrom: []

    sealedSecrets:
      ## @param jobs.job-name.sealedSecrets.enabled Enable sealed secrets
      enabled: false
      ## @param jobs.job-name.sealedSecrets.name Name of the sealed secret (Optional, defaults to the <job name>-sealed)
      name:
      ## @param jobs.job-name.sealedSecrets.encryptedData Encrypted data for the sealed secret
      encryptedData:

    infisical:
      ## @param jobs.job-name.infisical.enabled Enable infisical
      enabled: false

      sealedSecret:
        ## @param jobs.job-name.infisical.sealedSecret.name Name of the infisical sealed secret (Defaults to <job name>-infisical-token)
        name:
        ## @param jobs.job-name.infisical.sealedSecret.namespace Namespace for the infisical sealed secret (Defaults to the release namespace)
        namespace:
        ## @param jobs.job-name.infisical.sealedSecret.token Token for the infisical sealed secret
        token:

      secretsScope:
        ## @param jobs.job-name.infisical.secretsScope.secretsPath Secrets path for the infisical
        secretsPath: ""
        ## @param jobs.job-name.infisical.secretsScope.envSlug Env slug for the infisical
        envSlug: ""

      managedSecret:
        ## @param jobs.job-name.infisical.managedSecret.name Name of the managed secret (Defaults to <job name>-managed)
        name:
        ## @param jobs.job-name.infisical.managedSecret.namespace Namespace for the managed secret (Defaults to the release namespace)
        namespace:
